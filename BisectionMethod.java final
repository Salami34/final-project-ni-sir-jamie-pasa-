import java.util.Scanner;

public class BisectionMethod {
    public static void main(String[] args) {

        try (Scanner scanner = new Scanner(System.in)) {

            System.out.println("Enter the coefficients of the 5-term polynomial equation (from highest to lowest power):");
            System.out.print("Constant term: ");
            double constantTerm = scanner.nextDouble();

            System.out.println("Enter the coefficients for the other terms:");
            double[] coefficients = new double[5];
            for (int i = 4; i >= 0; i--) {
                System.out.print("Coefficient for x^" + i + ": ");
                coefficients[i] = scanner.nextDouble();
            }

            System.out.println("The equation is: ");
            displayEquation(coefficients, constantTerm);

            System.out.print("Enter the initial value of a: ");
            double a = scanner.nextDouble();
            System.out.print("Enter the initial value of b: ");
            double b = scanner.nextDouble();

            System.out.print("Enter the number of iterations: ");
            int desiredIterations = scanner.nextInt();

            System.out.print("Enter the error tolerance: ");
            double tolerance = scanner.nextDouble();

            System.out.printf("%-10s %-15s %-15s %-15s %-15s %-15s %-15s\n",
                    "Iteration", "a", "b", "Midpoint", "f(a)", "f(b)", "f(Midpoint)");

            for (int i = 1; i <= desiredIterations; i++) {

                double midpoint = (a + b) / 2;

                double fa = evaluateEquation(coefficients, constantTerm, a);
                double fb = evaluateEquation(coefficients, constantTerm, b);
                double fMidpoint = evaluateEquation(coefficients, constantTerm, midpoint);

                System.out.printf("%-10d %-15.6f %-15.6f %-15.6f %-15.6f %-15.6f %-15.6f\n", i, a, b, midpoint, fa, fb, fMidpoint);

                if (Math.abs(fMidpoint) < tolerance) {
                    System.out.println("\nRoot found: " + midpoint);
                    break;
                }

                if (fa * fMidpoint < 0) {
                    b = midpoint;
                } else {
                    a = midpoint;
                }
            }
        }
    }

    private static void displayEquation(double[] coefficients, double constantTerm) {
        System.out.print("Equation: ");
        for (int i = coefficients.length - 1; i >= 0; i--) {
            if (coefficients[i] != 0) {
                System.out.print("(" + coefficients[i] + "x^" + i + ") + ");
            }
        }
        System.out.println("(" + constantTerm + ")");
    }

    private static double evaluateEquation(double[] coefficients, double constantTerm, double x) {
        double result = constantTerm;
        for (int i = 0; i < coefficients.length; i++) {
            result += coefficients[i] * Math.pow(x, i);
        }
        return result;
    }
}
